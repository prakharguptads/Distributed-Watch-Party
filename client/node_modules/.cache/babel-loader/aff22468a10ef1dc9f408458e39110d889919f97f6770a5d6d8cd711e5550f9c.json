{"ast":null,"code":"import io from 'socket.io-client';\nimport { showToast } from '../utils/helper';\nexport const createConnection = (name, roomId = null, videoId = null, videoURL = null) => {\n  // create the socket connection with socket server\n  return new Promise(resolve => {\n    const socket = io(process.env.REACT_APP_SERVER, {\n      path: '/socket'\n    });\n    socket.on('connect', () => {\n      socket.emit('join', {\n        roomId: roomId || socket.id,\n        name,\n        userId: socket.id,\n        videoId,\n        videoURL\n      });\n      console.log(\"crC \", roomId, socket.id, name, videoId);\n      resolve(socket);\n    });\n  });\n};\nexport const bindSocketEvents = (socket, dispatchFunc) => {\n  if (!socket) return;\n  const {\n    userDispatch,\n    signalDispatch\n  } = dispatchFunc;\n  const dispatchAdminMessage = (id, text) => {\n    userDispatch({\n      type: 'UPDATE_MESSAGES',\n      data: {\n        from: null,\n        text,\n        id\n      }\n    });\n  };\n  socket.on('newMessage', data => {\n    const name = data.payload && data.payload.name;\n    console.log(\"new message\");\n    switch (data.type) {\n      case 'userJoin':\n        showToast('success', `${data.payload.name} has joined the room`);\n        dispatchAdminMessage(data.id, `${name} has joined`);\n        break;\n      case 'userLeft':\n        showToast('info', `${data.payload.name} has left the room`);\n        dispatchAdminMessage(data.id, `${name} has left`);\n        break;\n      case 'roomDeleted':\n        console.log(\"room Deleted\");\n        alert('error: Host has left the room');\n        window.location.href = '/';\n        break;\n      case 'userMessage':\n        userDispatch({\n          type: 'UPDATE_MESSAGES',\n          data\n        });\n        break;\n      case 'changeVideo':\n        // initiated when user is joining the room first time\n        // tells him about the currently playing video\n        userDispatch({\n          type: 'UPDATE_VIDEO_ID',\n          videoId: data.payload.videoId\n        });\n        break;\n      case 'updateVideoId':\n        // initiated when video is changed in the middle of playing\n        // everyone is informed of the newly selected video\n        signalDispatch({\n          type: 'RESET_SIGNAL_STATE'\n        });\n        signalDispatch({\n          type: 'VIDEO_CHANGING',\n          videoChanging: true\n        });\n        userDispatch({\n          type: 'UPDATE_VIDEO_ID',\n          videoId: data.payload.videoId\n        });\n        showToast('info', `${data.payload.user.name} has changed the video`, 'bottom-start');\n        dispatchAdminMessage(data.id, `The video has been changed by ${data.payload.user.name}`);\n        break;\n      case 'updateVideoState':\n        signalDispatch({\n          type: 'SET_TRANSITION',\n          transition: true\n        });\n        console.log('update video state triggered =', data.payload.type);\n        switch (data.payload.type) {\n          case 'PLAY':\n            signalDispatch({\n              type: 'PLAY_VIDEO',\n              currentTime: data.payload.currentTime\n            });\n            showToast('info', `${data.payload.user.name} has started playing the video`, 'bottom-start');\n            break;\n          case 'PAUSE':\n            signalDispatch({\n              type: 'PAUSE_VIDEO',\n              timestamp: Date.now()\n            });\n            showToast('info', `${data.payload.user.name} has paused the video`, 'bottom-start');\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n  });\n  socket.on('updateUserList', userList => {\n    console.log('new user list', userList);\n    userDispatch({\n      type: 'UPDATE_USER_LIST',\n      users: userList\n    });\n  });\n};","map":{"version":3,"names":["io","showToast","createConnection","name","roomId","videoId","videoURL","Promise","resolve","socket","process","env","REACT_APP_SERVER","path","on","emit","id","userId","console","log","bindSocketEvents","dispatchFunc","userDispatch","signalDispatch","dispatchAdminMessage","text","type","data","from","payload","alert","window","location","href","videoChanging","user","transition","currentTime","timestamp","Date","now","userList","users"],"sources":["/home/dell/Downloads/DD/Distributed-Watch-Party/client/src/utils/socket.js"],"sourcesContent":["import io from 'socket.io-client';\nimport { showToast } from '../utils/helper';\n\nexport const createConnection = (name, roomId = null, videoId = null, videoURL = null) => {\n\t// create the socket connection with socket server\n\treturn new Promise((resolve) => {\n\t\tconst socket = io(process.env.REACT_APP_SERVER, { path: '/socket' });\n\t\tsocket.on('connect', () => {\n\t\t\tsocket.emit('join', {\n\t\t\t\troomId: roomId || socket.id,\n\t\t\t\tname,\n\t\t\t\tuserId: socket.id,\n\t\t\t\tvideoId,\n\t\t\t\tvideoURL,\n\t\t\t\t\n\t\t\t});\n\t\t\tconsole.log(\"crC \",roomId,socket.id,name,videoId);\n\t\t\tresolve(socket);\n\t\t});\n\t});\n};\n\nexport const bindSocketEvents = (socket, dispatchFunc) => {\n\tif (!socket) return;\n\tconst { userDispatch, signalDispatch } = dispatchFunc;\n\n\tconst dispatchAdminMessage = (id, text) => {\n\t\tuserDispatch({\n\t\t\ttype: 'UPDATE_MESSAGES',\n\t\t\tdata: {\n\t\t\t\tfrom: null,\n\t\t\t\ttext,\n\t\t\t\tid,\n\t\t\t},\n\t\t});\n\t};\n\n\tsocket.on('newMessage', (data) => {\n\t\tconst name = data.payload && data.payload.name;\n\t\tconsole.log(\"new message\");\n\n\t\tswitch (data.type) {\n\t\t\tcase 'userJoin':\n\t\t\t\tshowToast(\n\t\t\t\t\t'success',\n\t\t\t\t\t`${data.payload.name} has joined the room`\n\t\t\t\t);\n\t\t\t\tdispatchAdminMessage(data.id, `${name} has joined`);\n\t\t\t\tbreak;\n\n\t\t\tcase 'userLeft':\n\t\t\t\tshowToast('info', `${data.payload.name} has left the room`);\n\t\t\t\tdispatchAdminMessage(data.id, `${name} has left`);\n\t\t\t\tbreak;\n\n\t\t\tcase 'roomDeleted':\n\t\t\t\tconsole.log(\"room Deleted\");\n\t\t\t\talert('error: Host has left the room');\n\t\t\t\twindow.location.href='/';\n\t\t\t\tbreak;\n\n\t\t\tcase 'userMessage':\n\t\t\t\tuserDispatch({ type: 'UPDATE_MESSAGES', data });\n\t\t\t\tbreak;\n\n\t\t\tcase 'changeVideo':\n\t\t\t\t// initiated when user is joining the room first time\n\t\t\t\t// tells him about the currently playing video\n\t\t\t\tuserDispatch({\n\t\t\t\t\ttype: 'UPDATE_VIDEO_ID',\n\t\t\t\t\tvideoId: data.payload.videoId,\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase 'updateVideoId':\n\t\t\t\t// initiated when video is changed in the middle of playing\n\t\t\t\t// everyone is informed of the newly selected video\n\t\t\t\tsignalDispatch({ type: 'RESET_SIGNAL_STATE' });\n\t\t\t\tsignalDispatch({ type: 'VIDEO_CHANGING', videoChanging: true });\n\t\t\t\tuserDispatch({\n\t\t\t\t\ttype: 'UPDATE_VIDEO_ID',\n\t\t\t\t\tvideoId: data.payload.videoId,\n\t\t\t\t});\n\t\t\t\tshowToast(\n\t\t\t\t\t'info',\n\t\t\t\t\t`${data.payload.user.name} has changed the video`,\n\t\t\t\t\t'bottom-start'\n\t\t\t\t);\n\t\t\t\tdispatchAdminMessage(\n\t\t\t\t\tdata.id,\n\t\t\t\t\t`The video has been changed by ${data.payload.user.name}`\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase 'updateVideoState':\n\t\t\t\tsignalDispatch({\n\t\t\t\t\ttype: 'SET_TRANSITION',\n\t\t\t\t\ttransition: true,\n\t\t\t\t});\n\t\t\t\tconsole.log(\n\t\t\t\t\t'update video state triggered =',\n\t\t\t\t\tdata.payload.type\n\t\t\t\t);\n\t\t\t\tswitch (data.payload.type) {\n\t\t\t\t\tcase 'PLAY':\n\t\t\t\t\t\tsignalDispatch({\n\t\t\t\t\t\t\ttype: 'PLAY_VIDEO',\n\t\t\t\t\t\t\tcurrentTime: data.payload.currentTime,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tshowToast(\n\t\t\t\t\t\t\t'info',\n\t\t\t\t\t\t\t`${data.payload.user.name} has started playing the video`,\n\t\t\t\t\t\t\t'bottom-start'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PAUSE':\n\t\t\t\t\t\tsignalDispatch({\n\t\t\t\t\t\t\ttype: 'PAUSE_VIDEO',\n\t\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tshowToast(\n\t\t\t\t\t\t\t'info',\n\t\t\t\t\t\t\t`${data.payload.user.name} has paused the video`,\n\t\t\t\t\t\t\t'bottom-start'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tsocket.on('updateUserList', (userList) => {\n\t\tconsole.log('new user list', userList);\n\t\tuserDispatch({ type: 'UPDATE_USER_LIST', users: userList });\n\t});\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}