{"ast":null,"code":"var _jsxFileName = \"/home/dell/redparty/client/src/components/Room/Player.js\";\nimport React, { useEffect, useContext, createRef } from 'react';\nimport styled from 'styled-components';\nimport YouTube from 'react-youtube';\nimport { SignalContext } from '../../contexts/SignalContext';\n\nfunction Player(props) {\n  let player = createRef();\n  const {\n    videoId,\n    socket\n  } = props;\n  const options = {\n    width: '100%',\n    height: '500px'\n  };\n  const {\n    dispatch: signalDispatch,\n    signalData\n  } = useContext(SignalContext);\n\n  const getCurrentPlayer = () => {\n    if (player.current) return player.current.getInternalPlayer();else return null;\n  };\n\n  const emitVideoState = (type, payload = {}, delayOffset = 0) => {\n    setTimeout(() => {\n      if (socket && !signalData.transition) {\n        console.log('Emitting video state', type);\n        socket.emit('videoStateChange', {\n          type,\n          payload\n        });\n      }\n    }, 500 + delayOffset);\n  };\n\n  const onVideoPlay = () => {\n    const player = getCurrentPlayer();\n    if (!player) return;\n    player.seekTo(signalData.playVideo || 0);\n    player.playVideo();\n  };\n\n  const onVideoPause = () => {\n    const player = getCurrentPlayer();\n    if (!player) return;\n    player.pauseVideo();\n\n    if (signalData.videoChanging) {\n      signalDispatch({\n        type: 'SET_TRANSITION',\n        transition: false\n      });\n      signalDispatch({\n        type: 'VIDEO_CHANGING',\n        videoChanging: false\n      });\n    }\n  };\n\n  const loadNewVideo = () => {\n    const player = getCurrentPlayer();\n    if (!player) return;\n    player.seekTo(0);\n    player.stopVideo();\n    signalDispatch({\n      type: 'SET_TRANSITION',\n      transition: false\n    });\n  };\n\n  useEffect(onVideoPlay, [signalData.playVideo]);\n  useEffect(onVideoPause, [signalData.pauseVideo]);\n  useEffect(loadNewVideo, [videoId]);\n\n  const onStateChange = e => {\n    const {\n      data\n    } = e;\n    const player = getCurrentPlayer();\n    if (!player) return;\n\n    switch (data) {\n      case -1:\n        console.log('Case -1 Video unstarted');\n        break;\n\n      case 0:\n        console.log('Case 0 Video Ended');\n        break;\n\n      case 1:\n        // PLAY\n        console.log('Case 1 Video Play');\n        signalDispatch({\n          type: 'SET_TRANSITION',\n          transition: false\n        });\n        player.playVideo();\n        emitVideoState('PLAY', {\n          currentTime: e.target.getCurrentTime()\n        }, 150);\n        break;\n\n      case 2:\n        // PAUSE\n        console.log('Case 2 Video paused');\n        emitVideoState('PAUSE');\n        signalDispatch({\n          type: 'SET_TRANSITION',\n          transition: false\n        });\n        break;\n\n      case 3:\n        console.log('Case 3 Bufferring');\n        break;\n\n      case 5:\n        console.log('Case 5 Video Cued');\n        signalDispatch({\n          type: 'SET_TRANSITION',\n          transition: false\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StyledPlayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }\n  }, videoId ? /*#__PURE__*/React.createElement(YouTube, {\n    videoId: videoId,\n    opts: options,\n    onStateChange: onStateChange,\n    ref: player,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }) : null);\n}\n\nconst StyledPlayer = styled.div`\n\tmargin-top: 30px;\n\tbackground-color: black;\n\twidth: 100%;\n\theight: 500px;\n`;\nexport default Player;","map":{"version":3,"sources":["/home/dell/redparty/client/src/components/Room/Player.js"],"names":["React","useEffect","useContext","createRef","styled","YouTube","SignalContext","Player","props","player","videoId","socket","options","width","height","dispatch","signalDispatch","signalData","getCurrentPlayer","current","getInternalPlayer","emitVideoState","type","payload","delayOffset","setTimeout","transition","console","log","emit","onVideoPlay","seekTo","playVideo","onVideoPause","pauseVideo","videoChanging","loadNewVideo","stopVideo","onStateChange","e","data","currentTime","target","getCurrentTime","StyledPlayer","div"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, createRef } from 'react';\nimport styled from 'styled-components';\nimport YouTube from 'react-youtube';\nimport { SignalContext } from '../../contexts/SignalContext';\n\nfunction Player(props) {\n\tlet player = createRef();\n\tconst { videoId, socket } = props;\n\tconst options = {\n\t\twidth: '100%',\n\t\theight: '500px',\n\t};\n\tconst { dispatch: signalDispatch, signalData } = useContext(SignalContext);\n\n\tconst getCurrentPlayer = () => {\n\t\tif (player.current) return player.current.getInternalPlayer();\n\t\telse return null;\n\t};\n\n\tconst emitVideoState = (type, payload = {}, delayOffset = 0) => {\n\t\tsetTimeout(() => {\n\t\t\tif (socket && !signalData.transition) {\n\t\t\t\tconsole.log('Emitting video state', type);\n\t\t\t\tsocket.emit('videoStateChange', { type, payload });\n\t\t\t}\n\t\t}, 500 + delayOffset);\n\t};\n\n\tconst onVideoPlay = () => {\n\t\tconst player = getCurrentPlayer();\n\t\tif (!player) return;\n\t\tplayer.seekTo(signalData.playVideo || 0);\n\t\tplayer.playVideo();\n\t};\n\n\tconst onVideoPause = () => {\n\t\tconst player = getCurrentPlayer();\n\t\tif (!player) return;\n\n\t\tplayer.pauseVideo();\n\t\tif (signalData.videoChanging) {\n\t\t\tsignalDispatch({ type: 'SET_TRANSITION', transition: false });\n\t\t\tsignalDispatch({\n\t\t\t\ttype: 'VIDEO_CHANGING',\n\t\t\t\tvideoChanging: false,\n\t\t\t});\n\t\t}\n\t};\n\n\tconst loadNewVideo = () => {\n\t\tconst player = getCurrentPlayer();\n\t\tif (!player) return;\n\n\t\tplayer.seekTo(0);\n\t\tplayer.stopVideo();\n\t\tsignalDispatch({ type: 'SET_TRANSITION', transition: false });\n\t};\n\n\tuseEffect(onVideoPlay, [signalData.playVideo]);\n\tuseEffect(onVideoPause, [signalData.pauseVideo]);\n\tuseEffect(loadNewVideo, [videoId]);\n\n\tconst onStateChange = (e) => {\n\t\tconst { data } = e;\n\t\tconst player = getCurrentPlayer();\n\t\tif (!player) return;\n\n\t\tswitch (data) {\n\t\t\tcase -1:\n\t\t\t\tconsole.log('Case -1 Video unstarted');\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\tconsole.log('Case 0 Video Ended');\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\t// PLAY\n\t\t\t\tconsole.log('Case 1 Video Play');\n\t\t\t\tsignalDispatch({ type: 'SET_TRANSITION', transition: false });\n\t\t\t\tplayer.playVideo();\n\n\t\t\t\temitVideoState(\n\t\t\t\t\t'PLAY',\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentTime: e.target.getCurrentTime(),\n\t\t\t\t\t},\n\t\t\t\t\t150\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\t// PAUSE\n\t\t\t\tconsole.log('Case 2 Video paused');\n\t\t\t\temitVideoState('PAUSE');\n\t\t\t\tsignalDispatch({ type: 'SET_TRANSITION', transition: false });\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tconsole.log('Case 3 Bufferring');\n\t\t\t\tbreak;\n\n\t\t\tcase 5:\n\t\t\t\tconsole.log('Case 5 Video Cued');\n\t\t\t\tsignalDispatch({ type: 'SET_TRANSITION', transition: false });\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\treturn (\n\t\t<StyledPlayer>\n\t\t\t{videoId ? (\n\t\t\t\t<YouTube\n\t\t\t\t\tvideoId={videoId}\n\t\t\t\t\topts={options}\n\t\t\t\t\tonStateChange={onStateChange}\n\t\t\t\t\tref={player}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t</StyledPlayer>\n\t);\n}\n\nconst StyledPlayer = styled.div`\n\tmargin-top: 30px;\n\tbackground-color: black;\n\twidth: 100%;\n\theight: 500px;\n`;\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}