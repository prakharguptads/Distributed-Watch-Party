{"ast":null,"code":"import io from 'socket.io-client';\nimport { showToast } from '../utils/helper';\nexport const createConnection = (name, roomId = null, videoId = null) => {\n  // create the socket connection with socket server\n  return new Promise(resolve => {\n    const socket = io(process.env.REACT_APP_SERVER, {\n      path: '/socket'\n    });\n    socket.on('connect', () => {\n      socket.emit('join', {\n        roomId: roomId || socket.id,\n        name,\n        userId: socket.id,\n        videoId\n      });\n      resolve(socket);\n    });\n    console.log(\"crC \", roomId, name, videoId);\n  });\n};\nexport const bindSocketEvents = (socket, dispatchFunc) => {\n  if (!socket) return;\n  const {\n    userDispatch,\n    signalDispatch\n  } = dispatchFunc;\n\n  const dispatchAdminMessage = (id, text) => {\n    userDispatch({\n      type: 'UPDATE_MESSAGES',\n      data: {\n        from: null,\n        text,\n        id\n      }\n    });\n  };\n\n  socket.on('newMessage', data => {\n    const name = data.payload && data.payload.name;\n\n    switch (data.type) {\n      case 'userJoin':\n        showToast('success', `${data.payload.name} has joined the room`);\n        dispatchAdminMessage(data.id, `${name} has joined`);\n        break;\n\n      case 'userLeft':\n        showToast('info', `${data.payload.name} has left the room`);\n        dispatchAdminMessage(data.id, `${name} has left`);\n        break;\n\n      case 'userMessage':\n        userDispatch({\n          type: 'UPDATE_MESSAGES',\n          data\n        });\n        break;\n\n      case 'changeVideo':\n        // initiated when user is joining the room first time\n        // tells him about the currently playing video\n        userDispatch({\n          type: 'UPDATE_VIDEO_ID',\n          videoId: data.payload.videoId\n        });\n        break;\n\n      case 'updateVideoId':\n        // initiated when video is changed in the middle of playing\n        // everyone is informed of the newly selected video\n        signalDispatch({\n          type: 'RESET_SIGNAL_STATE'\n        });\n        signalDispatch({\n          type: 'VIDEO_CHANGING',\n          videoChanging: true\n        });\n        userDispatch({\n          type: 'UPDATE_VIDEO_ID',\n          videoId: data.payload.videoId\n        });\n        showToast('info', `${data.payload.user.name} has changed the video`, 'bottom-start');\n        dispatchAdminMessage(data.id, `The video has been changed by ${data.payload.user.name}`);\n        break;\n\n      case 'updateVideoState':\n        signalDispatch({\n          type: 'SET_TRANSITION',\n          transition: true\n        });\n        console.log('update video state triggered =', data.payload.type);\n\n        switch (data.payload.type) {\n          case 'PLAY':\n            signalDispatch({\n              type: 'PLAY_VIDEO',\n              currentTime: data.payload.currentTime\n            });\n            showToast('info', `${data.payload.user.name} has started playing the video`, 'bottom-start');\n            break;\n\n          case 'PAUSE':\n            signalDispatch({\n              type: 'PAUSE_VIDEO',\n              timestamp: Date.now()\n            });\n            showToast('info', `${data.payload.user.name} has paused the video`, 'bottom-start');\n            break;\n\n          default:\n            break;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  });\n  socket.on('updateUserList', userList => {\n    console.log('new user list', userList);\n    userDispatch({\n      type: 'UPDATE_USER_LIST',\n      users: userList\n    });\n  });\n};","map":{"version":3,"sources":["/home/dell/DSparty/redparty/client/src/utils/socket.js"],"names":["io","showToast","createConnection","name","roomId","videoId","Promise","resolve","socket","process","env","REACT_APP_SERVER","path","on","emit","id","userId","console","log","bindSocketEvents","dispatchFunc","userDispatch","signalDispatch","dispatchAdminMessage","text","type","data","from","payload","videoChanging","user","transition","currentTime","timestamp","Date","now","userList","users"],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\nimport { showToast } from '../utils/helper';\n\nexport const createConnection = (name, roomId = null, videoId = null) => {\n\t// create the socket connection with socket server\n\treturn new Promise((resolve) => {\n\t\tconst socket = io(process.env.REACT_APP_SERVER, { path: '/socket' });\n\t\tsocket.on('connect', () => {\n\t\t\tsocket.emit('join', {\n\t\t\t\troomId: roomId || socket.id,\n\t\t\t\tname,\n\t\t\t\tuserId: socket.id,\n\t\t\t\tvideoId,\n\t\t\t});\n\t\t\tresolve(socket);\n\t\t});\n\t\tconsole.log(\"crC \",roomId,name,videoId);\n\t});\n};\n\nexport const bindSocketEvents = (socket, dispatchFunc) => {\n\tif (!socket) return;\n\tconst { userDispatch, signalDispatch } = dispatchFunc;\n\n\tconst dispatchAdminMessage = (id, text) => {\n\t\tuserDispatch({\n\t\t\ttype: 'UPDATE_MESSAGES',\n\t\t\tdata: {\n\t\t\t\tfrom: null,\n\t\t\t\ttext,\n\t\t\t\tid,\n\t\t\t},\n\t\t});\n\t};\n\n\tsocket.on('newMessage', (data) => {\n\t\tconst name = data.payload && data.payload.name;\n\n\t\tswitch (data.type) {\n\t\t\tcase 'userJoin':\n\t\t\t\tshowToast(\n\t\t\t\t\t'success',\n\t\t\t\t\t`${data.payload.name} has joined the room`\n\t\t\t\t);\n\t\t\t\tdispatchAdminMessage(data.id, `${name} has joined`);\n\t\t\t\tbreak;\n\n\t\t\tcase 'userLeft':\n\t\t\t\tshowToast('info', `${data.payload.name} has left the room`);\n\t\t\t\tdispatchAdminMessage(data.id, `${name} has left`);\n\t\t\t\tbreak;\n\n\t\t\tcase 'userMessage':\n\t\t\t\tuserDispatch({ type: 'UPDATE_MESSAGES', data });\n\t\t\t\tbreak;\n\n\t\t\tcase 'changeVideo':\n\t\t\t\t// initiated when user is joining the room first time\n\t\t\t\t// tells him about the currently playing video\n\t\t\t\tuserDispatch({\n\t\t\t\t\ttype: 'UPDATE_VIDEO_ID',\n\t\t\t\t\tvideoId: data.payload.videoId,\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase 'updateVideoId':\n\t\t\t\t// initiated when video is changed in the middle of playing\n\t\t\t\t// everyone is informed of the newly selected video\n\t\t\t\tsignalDispatch({ type: 'RESET_SIGNAL_STATE' });\n\t\t\t\tsignalDispatch({ type: 'VIDEO_CHANGING', videoChanging: true });\n\t\t\t\tuserDispatch({\n\t\t\t\t\ttype: 'UPDATE_VIDEO_ID',\n\t\t\t\t\tvideoId: data.payload.videoId,\n\t\t\t\t});\n\t\t\t\tshowToast(\n\t\t\t\t\t'info',\n\t\t\t\t\t`${data.payload.user.name} has changed the video`,\n\t\t\t\t\t'bottom-start'\n\t\t\t\t);\n\t\t\t\tdispatchAdminMessage(\n\t\t\t\t\tdata.id,\n\t\t\t\t\t`The video has been changed by ${data.payload.user.name}`\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase 'updateVideoState':\n\t\t\t\tsignalDispatch({\n\t\t\t\t\ttype: 'SET_TRANSITION',\n\t\t\t\t\ttransition: true,\n\t\t\t\t});\n\t\t\t\tconsole.log(\n\t\t\t\t\t'update video state triggered =',\n\t\t\t\t\tdata.payload.type\n\t\t\t\t);\n\t\t\t\tswitch (data.payload.type) {\n\t\t\t\t\tcase 'PLAY':\n\t\t\t\t\t\tsignalDispatch({\n\t\t\t\t\t\t\ttype: 'PLAY_VIDEO',\n\t\t\t\t\t\t\tcurrentTime: data.payload.currentTime,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tshowToast(\n\t\t\t\t\t\t\t'info',\n\t\t\t\t\t\t\t`${data.payload.user.name} has started playing the video`,\n\t\t\t\t\t\t\t'bottom-start'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PAUSE':\n\t\t\t\t\t\tsignalDispatch({\n\t\t\t\t\t\t\ttype: 'PAUSE_VIDEO',\n\t\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tshowToast(\n\t\t\t\t\t\t\t'info',\n\t\t\t\t\t\t\t`${data.payload.user.name} has paused the video`,\n\t\t\t\t\t\t\t'bottom-start'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tsocket.on('updateUserList', (userList) => {\n\t\tconsole.log('new user list', userList);\n\t\tuserDispatch({ type: 'UPDATE_USER_LIST', users: userList });\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}