{"ast":null,"code":"var _jsxFileName = \"/home/dell/DSparty/watchparty/client/src/contexts/SignalContext.js\";\nimport React, { createContext, useReducer } from 'react';\nimport { signalReducer } from '../reducers/signalReducer';\nexport const SignalContext = createContext();\n/*\nProvides mechanism to handle various server signal states. \nLike play video, pause video etc. Whenver one of these events are fired,\nthe global context data is updated which in turn fires different Video Player\nrelated functions using useEffect(). \n\nFor example, when PLAY_VIDEO event is trigerred, 'playVideo' will update with \nthe value of the current video time. For PAUSE_VIDEO, it will hold UNIX timestamp\nas we don't really need time to pause a video, we just want to update the state\nto trigger useEffect() hooks\n*/\n\nexport const SignalContextProvider = props => {\n  const initialState = {\n    playVideo: null,\n    // hold video play time\n    pauseVideo: null,\n    // hold command timestamp\n    // when transition is true, no player related socket event will\n    // be emitted to the server. This prevents unintentional back and forth\n    // event passing and provides consistency in video seek/pause.\n    transition: false,\n    videoChanging: false\n  };\n  const [signalData, dispatch] = useReducer(signalReducer, initialState);\n  return /*#__PURE__*/React.createElement(SignalContext.Provider, {\n    value: {\n      signalData,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/home/dell/DSparty/watchparty/client/src/contexts/SignalContext.js"],"names":["React","createContext","useReducer","signalReducer","SignalContext","SignalContextProvider","props","initialState","playVideo","pauseVideo","transition","videoChanging","signalData","dispatch","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAEA,OAAO,MAAMC,aAAa,GAAGH,aAAa,EAAnC;AAEP;;;;;;;;;;;;AAYA,OAAO,MAAMI,qBAAqB,GAAIC,KAAD,IAAW;AAC/C,QAAMC,YAAY,GAAG;AACpBC,IAAAA,SAAS,EAAE,IADS;AACH;AACjBC,IAAAA,UAAU,EAAE,IAFQ;AAEF;AAElB;AACA;AACA;AACAC,IAAAA,UAAU,EAAE,KAPQ;AAQpBC,IAAAA,aAAa,EAAE;AARK,GAArB;AAWA,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACC,aAAD,EAAgBI,YAAhB,CAAzC;AAEA,sBACC,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEK,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEP,KAAK,CAACQ,QADR,CADD;AAKA,CAnBM","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport { signalReducer } from '../reducers/signalReducer';\n\nexport const SignalContext = createContext();\n\n/*\nProvides mechanism to handle various server signal states. \nLike play video, pause video etc. Whenver one of these events are fired,\nthe global context data is updated which in turn fires different Video Player\nrelated functions using useEffect(). \n\nFor example, when PLAY_VIDEO event is trigerred, 'playVideo' will update with \nthe value of the current video time. For PAUSE_VIDEO, it will hold UNIX timestamp\nas we don't really need time to pause a video, we just want to update the state\nto trigger useEffect() hooks\n*/\n\nexport const SignalContextProvider = (props) => {\n\tconst initialState = {\n\t\tplayVideo: null, // hold video play time\n\t\tpauseVideo: null, // hold command timestamp\n\n\t\t// when transition is true, no player related socket event will\n\t\t// be emitted to the server. This prevents unintentional back and forth\n\t\t// event passing and provides consistency in video seek/pause.\n\t\ttransition: false,\n\t\tvideoChanging: false,\n\t};\n\n\tconst [signalData, dispatch] = useReducer(signalReducer, initialState);\n\n\treturn (\n\t\t<SignalContext.Provider value={{ signalData, dispatch }}>\n\t\t\t{props.children}\n\t\t</SignalContext.Provider>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}